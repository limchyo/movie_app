{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8EA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAqBzBC,MAjFf,SAAAC,GAAiD,IAAjCZ,EAAiCY,EAAjCZ,OAAQM,EAAyBM,EAAzBN,MAAOO,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBAEfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAEIgB,KAAML,EAENM,QAAQ,IAERC,SAAS,MAETC,WAAS,EAETC,QAAQ,gBC8JbC,6MAnKbC,MAAQ,KA8FRC,cAAgB,WAed,OAbeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAKnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAQtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEUb,EAAKc,WAFf,OAELb,EAFKU,EAAAI,KAIXf,EAAKgB,SAAS,CACZf,WALS,wBAAAU,EAAAM,SAAAT,EAAAU,WAUbJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SAEvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFApD1BP,KAAKX,8CAuDE,IACCN,EAAWiB,KAAKpB,MAAhBG,OACR,OAqBE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9BA,EAASiB,KAAKnB,gBAAkB,kBAlKvB6B,aC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.c8f68998.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n// class Movie extends Component {\r\n\r\n//     // 부모 컴포넌트에서 받은 데이터 형태를 규정하여 이와 다를 경우 에러가 발생한다\r\n//     static propTypes = {\r\n//         // isRequired는 필수사항으로 지정해준다. 부모컴포넌트에서 값이 없을 경우 오류발생\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string,\r\n//     }\r\n\r\n//     render() {\r\n//         return(\r\n//             <div>\r\n//                 {/* MoviePoster 컴포넌트에 poster 값을 담아준다 */}\r\n//                 <MoviePoster poster={this.props.poster} />\r\n//                 {/* 부모컴포넌트에서 전달 받은 title 값을 출력한다 */}\r\n//                 <h1>{this.props.title}</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Movie({poster, title, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n            <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                {/* 시놉시스를 3줄로 줄여서 나머지는 ...으로 처리 */}\r\n                <LinesEllipsis\r\n\r\n                    text={synopsis}\r\n\r\n                    maxLine='3'\r\n\r\n                    ellipsis='...'\r\n\r\n                    trimRight\r\n\r\n                    basedOn='letters'\r\n\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 어떤 컴포넌트는 return만 위해서 존재하는데 MoviePoster가 그에 해당된다\r\n// componentWillMount, function, update state 따위는 필요가 없다\r\n// 하나의 props인 poster 데이터와 html 태그만 있으면 된다\r\n// class MoviePoster extends Component {\r\n    \r\n//     // 부모 컴포넌트에서 받은 데이터를 체크하고, 지정한 타입과 다르면 에러 발생\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired,\r\n//     }\r\n\r\n//     render() {\r\n//         return(\r\n//             // 부모컴포넌트인 Movie 컴포넌트에서 전달 받은 poster 값을 출력한다\r\n//             <img src={this.props.poster} alt=\"Movie Poster\" />\r\n//         )\r\n//     }\r\n// }\r\n\r\n// function 컴포넌트는 state를 가지지 않고, render(), 라이프사이클이 없다\r\n// alt를 title에 삽입하면 웹에서 이미지에 마우스 포인트를 다가가면 영화제목이 뜬다\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\n// Movie.js에서 Movie 클래스를 가져온다\nimport Movie from './Movie'\n\n// const movieTitles = [\n//   \"Matrix\",\n//   \"Oldboy\",\n//   \"Terrace House\",\n//   \"Suits\",\n// ]\n\n// const movieImages = [\n//   \"https://cdn.vox-cdn.com/thumbor/veUKpCnSKflt86VfCpTfyUqEfYQ=/0x0:1280x720/1200x800/filters:focal(538x258:742x462)/cdn.vox-cdn.com/uploads/chorus_image/image/52198011/c6f5a81cb0fcc1c0e5ae3cba9cc4f40ae35476cb.0.jpeg\",\n//   \"https://static01.nyt.com/images/2018/10/18/arts/18terracehouse/18terracehouse-articleLarge.jpg?quality=75&auto=webp&disable=upscale\",\n//   \"https://cdn.vox-cdn.com/thumbor/GltBWgYa-A_SKHFx2CKHEr93Zvw=/0x0:5760x3840/1200x0/filters:focal(0x0:5760x3840):no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/9898277/_DSC_I1A7700.JPG\",\n//   \"https://i.ytimg.com/vi/4qBl7_t0M_U/maxresdefault.jpg\",\n// ]\n\n// const movies = [\n//   {\n//     title: \"Matrix\", \n//     poster: \"https://cdn.vox-cdn.com/thumbor/veUKpCnSKflt86VfCpTfyUqEfYQ=/0x0:1280x720/1200x800/filters:focal(538x258:742x462)/cdn.vox-cdn.com/uploads/chorus_image/image/52198011/c6f5a81cb0fcc1c0e5ae3cba9cc4f40ae35476cb.0.jpeg\",\n//   },\n//   {\n//     title: \"Oldboy\",\n//     poster: \"https://static01.nyt.com/images/2018/10/18/arts/18terracehouse/18terracehouse-articleLarge.jpg?quality=75&auto=webp&disable=upscale\",\n//   },\n//   {\n//     title: \"Terrace House\",\n//     poster: \"https://cdn.vox-cdn.com/thumbor/GltBWgYa-A_SKHFx2CKHEr93Zvw=/0x0:5760x3840/1200x0/filters:focal(0x0:5760x3840):no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/9898277/_DSC_I1A7700.JPG\",\n//   },\n//   {\n//     title: \"Suits\",\n//     poster: \"https://i.ytimg.com/vi/4qBl7_t0M_U/maxresdefault.jpg\",\n//   }\n// ]\n\n// extends를 사용하여 Component를 가져와야 App 이름의 컴포넌트를 만들 수 있다\nclass App extends Component {\n\n  // state는 컴포넌트 안에서 사용되는 객체\n  // 특징은 state가 바뀔 때마다 render()가 실행된다\n\n  state = {\n    // greeting: 'Hello!',\n    // movies: [\n    //   {\n    //     title: \"Matrix\", \n    //     poster: \"https://cdn.vox-cdn.com/thumbor/veUKpCnSKflt86VfCpTfyUqEfYQ=/0x0:1280x720/1200x800/filters:focal(538x258:742x462)/cdn.vox-cdn.com/uploads/chorus_image/image/52198011/c6f5a81cb0fcc1c0e5ae3cba9cc4f40ae35476cb.0.jpeg\",\n    //   },\n    //   {\n    //     title: \"Oldboy\",\n    //     poster: \"https://static01.nyt.com/images/2018/10/18/arts/18terracehouse/18terracehouse-articleLarge.jpg?quality=75&auto=webp&disable=upscale\",\n    //   },\n    //   {\n    //     title: \"Terrace House\",\n    //     poster: \"https://cdn.vox-cdn.com/thumbor/GltBWgYa-A_SKHFx2CKHEr93Zvw=/0x0:5760x3840/1200x0/filters:focal(0x0:5760x3840):no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/9898277/_DSC_I1A7700.JPG\",\n    //   },\n    //   {\n    //     title: \"Suits\",\n    //     poster: \"https://i.ytimg.com/vi/4qBl7_t0M_U/maxresdefault.jpg\",\n    //   },\n    //   {\n    //     title: 'Heart Signal',\n    //     poster: 'https://t1.daumcdn.net/cfile/tistory/2165C83C58A206D523',\n    //   }\n    // ]\n  }\n\n  // 컴포넌트가 마운트(트리에 삽입되면)되면 작동하는 메소드\n  // state 값을 설정하면 render를 재실행한다\n  // componentDidMount(){\n  //   // ()는 function()과 같은 의미\n  //   setTimeout(() => {\n  //     // 아래와 같이 state 값은 직접 접근해서 값을 변경하면 바뀌지 않는다\n  //     // this.state.greeting = 'something'\n\n  //     // setState()를 사용해 새로운 state 객체를 지정해야 정상 작동한다\n  //     // 새로 state 객체를 지정하면 render가 다시 실행된다\n  //     // this.setState({\n  //     //   greeting: 'Hello again!'\n  //     // })\n  //     this.setState({\n  //       // movies: [\n  //         // state 객체 movies 값을 전체 불러온다\n  //         // ...this.state.movies,\n\n  //         // 새로 추가할 데이터를 입력한다\n  //         // {\n  //         //   title: 'Heart Signal',\n  //         //   poster: 'https://t1.daumcdn.net/cfile/tistory/2165C83C58A206D523',\n  //         // }\n\n  //       movies: [\n  //         {\n  //           title: \"Matrix\", \n  //           poster: \"https://cdn.vox-cdn.com/thumbor/veUKpCnSKflt86VfCpTfyUqEfYQ=/0x0:1280x720/1200x800/filters:focal(538x258:742x462)/cdn.vox-cdn.com/uploads/chorus_image/image/52198011/c6f5a81cb0fcc1c0e5ae3cba9cc4f40ae35476cb.0.jpeg\",\n  //         },\n  //         {\n  //           title: \"Oldboy\",\n  //           poster: \"https://static01.nyt.com/images/2018/10/18/arts/18terracehouse/18terracehouse-articleLarge.jpg?quality=75&auto=webp&disable=upscale\",\n  //         },\n  //         {\n  //           title: \"Terrace House\",\n  //           poster: \"https://cdn.vox-cdn.com/thumbor/GltBWgYa-A_SKHFx2CKHEr93Zvw=/0x0:5760x3840/1200x0/filters:focal(0x0:5760x3840):no_upscale()/cdn.vox-cdn.com/uploads/chorus_asset/file/9898277/_DSC_I1A7700.JPG\",\n  //         },\n  //         {\n  //           title: \"Suits\",\n  //           poster: \"https://i.ytimg.com/vi/4qBl7_t0M_U/maxresdefault.jpg\",\n  //         },\n  //         {\n  //           title: 'Heart Signal',\n  //           poster: 'https://t1.daumcdn.net/cfile/tistory/2165C83C58A206D523',\n  //         }\n  //       ]\n  //     })\n  //   }, 5000)\n  // }\n\n  // 마운트가 되면 해당 url에 접속하여 데이터를 fetch해온다(가지고온다)\n  componentDidMount(){\n    this._getMovies();\n  }\n\n\n  // 설정된 시간 이후에 내장함수 실행\n  // componentDidMount(){\n  //   setTimeout(function(){\n  //     console.log('hello');\n  //   }, 5000)\n    // 위에는 옛 방식, 아래가 현 방식\n    // setTimeout(() => {\n    //   console.log('hello');\n    // }, 5000)\n  // }\n\n  // 언더바를 사용한 이유는 헷갈림을 방지하고 나만의 메소드를 나타내기 위해\n  _renderMovies = () => {\n    // const movies = this.state.movies.map((movie, index) => {\n    const movies = this.state.movies.map(movie => {\n      // movies 변수를 출력하여 어떤 데이터(포스터, 제목, 장르, 설명 등)를 갖고 있는지 확인하기\n      // console.log(movies)\n      // return <Movie title={movie.title} poster={movie.large_cover_image} key={index}/> movie.id로 값 변경\n      // 영화 데이터(포스터, 제목, 장르, 설명) 갖고오기 \n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  // 이전 라인에서의 작업을 기다리지 않고 별도로 작업 실행\n  // AJAX는 페이지 새로고침 없이 데이터를 가져올 수 있다. (비동기화=async)\n  _getMovies = async () => {\n    // await는 _callApi()가 끝나기(값을 반환할 때)를 기다리고,\n    const movies = await this._callApi()\n    // this._callApi()를 통해 반환된 값을 state에 담는다\n    this.setState({\n      movies\n    })\n  }\n\n  // fetch한 promise를 반환한다\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    // => 화살표 자체에 return이 내포되어있다\n    .then(json => json.data.movies)\n    // err => 는 function(err)와 같은 뜻\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      // // <div className=\"App\">\n      //   {/* 컴포넌트에 속한 state 객체에서 greeting 값을 가져온다 */}\n      //   {/* {this.state.greeting} */}\n\n      //   {/* Movie 컴포넌트에 title, poster에 각각 값을 담아준다 */}\n      //   {/* <Movie title={movieTitles[0]} poster={movieImages[0]} />\n      //   <Movie title={movieTitles[1]} poster={movieImages[1]} />\n      //   <Movie title={movieTitles[2]} poster={movieImages[2]} />\n      //   <Movie title={movieTitles[3]} poster={movieImages[3]} /> */}\n\n      //   {/* 리스트에 map 메소드를 사용하여 각 객체의 데이터를 컴포넌트로 전달 */}\n      //   {/* index는 각 객체에 id 값을 넣어주며 key값으로 전달한다 */}\n      //   {/* {this.state.movies.map((movie, index) => {\n      //     return <Movie title={movie.title} poster={movie.poster} key={index}/>\n      //   })} */}\n\n      //   {/* 삼항연산자 사용 */}\n      //   {/* 컴포넌트 state 객체에서 movies 값이 있다면 _renderMovies 실행 없으면 'Loading' 문자 출력 */}\n      //   {/* {this.state.movies ? this._renderMovies() : 'Loading'} */}\n      // // </div>\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// App.js에서 App 컴포넌트를 가져와 <HTML>에서 id값이 \"root\"인 곳에 보낸다\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}